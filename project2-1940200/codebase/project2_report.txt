1. Basic information

Team Number: 6
Student ID# of Submitter: 189720
Name of Submitter: Tommy
ID#s and Names for others on the Team



2. Catalogs/Metadata

When intialized our catalog contains two tables, Tables table and Columns table. The Tables table contains 4 attributes, 
table-id which indicates the unique id of the table, table-name, file-name, and isSystem which indicates
if distinguishes if the table was created during intialization or by the user. The columns table on the other hand contains the 
table-id which indicates which table this column is from, column-name, column-type, column-length, and column-position. 



3. Internal Record Format

- Show your record format design, and describe how your design satisfies O(1) field access. If not, just mention that your team hasn't implemented this feature.
- Describe how you store a VarChar field.
- Describe how you deal with update of a VarChar field.
Record Insertion Procedure:
    - Get the record's size
    - Read through each page to see if there's enough free space for the record
    - If a page with enough space was not found, append a new page and insert the record there.
    - Update the Slot Directory with the new free space offset
    - Create a new Slot struct with the SD's free space offset and record size as size
    


4. Page Format

- Show your page format design.
- Describe how you deal with update of a record.
- Describe how you deal with delete of a record.
Delete Record:
 - First we run some checks 
    -Check if the page is valid and the slot exists
    - Check if the record has been deleted already
 - Here we will now overwrite the deleted data with all the records before it 
   - We first get the location of where we will start copying the data from which is given by the free space offset variable
   - Then we will get the destination where we will write this data to which is freeSpaceOffset + length of the record we will delete
   - Then the amount of bytes we copy is the length of all the records before our record we will delete
     which is the address of the record we will delete - freeSpaceOffset
 - Afterwards, we will update the deleted record's slot by changing the length and offset to zero
 - Then we change the freeSpaceOffset by adding the length of the deleted record onto it.

 Update Record:
 - First we run some basic checks
 - When we have update record we have 3 main cases
    -Case1: new record size = old record size
        - In this case, we can just overwrite the record
        - However if its less than we also have to change the offset
    -Case2: new record size < old record size
        - We delete the old record and put the new record in 
    -Case3: new record size > old recordSize
        - Check if the page can fit the new record
            - If it can fit the new record, then put it in the next available place
            - If it can't, find a page that can fit the record
    


5. File Format

- Show your file format design.


6. Implementation Detail

Other implementation details goes here.  For example:  
- Describe your use of Forwarding Addresses, including what happens when a Forwarding Address needs to be forwarded yet again to another page.
- Describe how a scan is done, touching each record exactly once even when there are Forwarding Addresses.
- Describe how you determine that a previously slot on a page is empty (after record is deleted), so that the slot can be re-used for another record.  (Yes, a record's rid is supposed to be permanent, but only while the record exists.)


7. Other (optional)

- Freely use this section to tell us about things that are related to the project 2, but not related to the other sections, such as design and implementation information for the Advanced (Extra Credit) Features, if you've implemented them (optional).
